"""
Main InvenioRDM configuration file. For full list of settings, see:
https://inveniordm.docs.cern.ch/reference/configuration/
"""

from datetime import datetime

import json
from os import environ
from pathlib import Path
from typing import Any

from google.cloud import secretmanager
from google.oauth2.service_account import Credentials
from invenio_i18n import lazy_gettext as _


# Get configuration from local JSON file or Google Secret Manager
# TODO we will need to add ENVIRONMENT as extraEnvVars in helm values.yml
environment: str = environ["ENVIRONMENT"]
if environment == "local" and environ.get("CCA_SECRETS"):
    secrets_path = Path(environ["CCA_SECRETS"])
    if secrets_path.exists():
        with open(secrets_path) as f:
            print(f"Loading secrets from {secrets_path}")
            secrets = json.load(f)
    else:
        raise FileNotFoundError(
            f"Secrets file not found at {secrets_path}. "
            "Please ensure the CCA_SECRETS environment variable points to a valid file."
        )
else:
    # Load settings from Google Secret Manager
    if environ.get("GSM_CREDENTIALS"):
        GSM_CREDENTIALS: Credentials | None = Credentials.from_service_account_info(
            json.loads(environ.get("GSM_CREDENTIALS", ""))
        )
    else:
        # No credentials needed locally
        GSM_CREDENTIALS = None
    if GSM_CREDENTIALS:
        secret_manager_client = secretmanager.SecretManagerServiceClient(
            credentials=GSM_CREDENTIALS
        )
    else:
        secret_manager_client = secretmanager.SecretManagerServiceClient()

    if environment in ("local", "staging"):
        GCP_PROJECT: str = "cca-web-staging"
    elif environment == "production":
        GCP_PROJECT = "cca-web-0"
    else:
        raise ValueError(
            f"Invalid ENVIRONMENT value: {environment}. "
            "Expected 'local', 'staging', or 'production'."
        )
    print(f"Loading invenio_{environment} secrets from GCP project {GCP_PROJECT}")
    payload: str = secret_manager_client.access_secret_version(
        name=f"projects/{GCP_PROJECT}/secrets/invenio_{environment}/versions/latest"
    ).payload.data.decode("utf-8")
    # Parse the JSON payload
    secrets: dict[str, Any] = json.loads(payload)

# Flask
# =====
# See https://flask.palletsprojects.com/en/1.1.x/config/

# Define the value of the cache control header `max-age` returned by the server when serving
# public files. Files will be cached by the browser for the provided number of seconds.
# See flask documentation for more information:
# https://flask.palletsprojects.com/en/2.1.x/config/#SEND_FILE_MAX_AGE_DEFAULT
SEND_FILE_MAX_AGE_DEFAULT = 300

# SECURITY WARNING: keep the secret key used in production secret!
SECRET_KEY = secrets["INVENIO_SECRETKEY"]

# Since HAProxy and Nginx route all requests no matter the host header
# provided, the allowed hosts variable is set to localhost. In production it
# should be set to the correct host and it is strongly recommended to only
# route correct hosts to the application.
APP_ALLOWED_HOSTS: list[str] = secrets["APP_ALLOWED_HOSTS"]

# Flask-IIIF
# ==========
# TODO this can be removed in v13 when my PRs are merged
from flask_iiif.config import IIIF_FORMATS, IIIF_FORMATS_PIL_MAP

IIIF_FORMATS["webp"] = "image/webp"
IIIF_FORMATS_PIL_MAP["webp"] = "webp"

# Flask-SQLAlchemy
# ================
# See https://flask-sqlalchemy.palletsprojects.com/en/2.x/config/
SQLALCHEMY_DATABASE_URI = secrets["INVENIO_SQLALCHEMY_DATABASE_URI"]

# Invenio-App
# ===========
# See https://invenio-app.readthedocs.io/en/latest/configuration.html
APP_DEFAULT_SECURE_HEADERS = {
    "content_security_policy": {
        "default-src": [
            "'self'",
            "data:",  # for fonts
            "'unsafe-inline'",  # for inline scripts and styles
            "blob:",  # for pdf preview
            # Add your own policies here (e.g. analytics)
        ],
    },
    "content_security_policy_report_only": False,
    "content_security_policy_report_uri": None,
    "force_file_save": False,
    "force_https": True,
    "force_https_permanent": False,
    "frame_options": "sameorigin",
    "frame_options_allow_from": None,
    "session_cookie_http_only": True,
    "session_cookie_secure": True,
    "strict_transport_security": True,
    "strict_transport_security_include_subdomains": True,
    "strict_transport_security_max_age": 31556926,  # One year in seconds
    "strict_transport_security_preload": False,
}

# Flask-Babel
# ===========
# See https://python-babel.github.io/flask-babel/#configuration
# Default locale (language)
BABEL_DEFAULT_LOCALE = "en"
# Default time zone
BABEL_DEFAULT_TIMEZONE = "America/Los_Angeles"

# Invenio-I18N
# ============
# See https://invenio-i18n.readthedocs.io/en/latest/configuration.html
# Other supported languages (do not include BABEL_DEFAULT_LOCALE in list).
I18N_LANGUAGES = [
    # ('de', _('German')),
]

# Invenio-Theme
# =============
# See https://invenio-theme.readthedocs.io/en/latest/configuration.html
# Lots of template options here
# Frontpage title
THEME_FRONTPAGE_TITLE = "CCA Digital Archive"
# Header logo
THEME_LOGO = "images/invenio-rdm.svg"
THEME_TRACKINGCODE_TEMPLATE = "./tracking_code.html"

# Invenio-App-RDM
# ===============
# Instance's theme entrypoint file. Path relative to the ``assets/`` folder.
INSTANCE_THEME_FILE = "./less/theme.less"

APP_RDM_DEPOSIT_FORM_DEFAULTS = {
    "publication_date": lambda: datetime.now().strftime("%Y-%m-%d"),
    "rights": [
        {
            "id": "copyright",
            "title": "Copyright",
            "description": (
                "Copyright is a legal right that grants the creator"
                "of an original work exclusive rights to it."
            ),
            "link": "https://www.copyright.gov/",
        }
    ],
}

APP_RDM_DEPOSIT_FORM_AUTOCOMPLETE_NAMES = "search"  # "search_only" or "off"

# Static Pages
# ============
# https://inveniordm.docs.cern.ch/customize/static_pages/
# APP_RDM_PAGES = { "test": "/test", }

# Communities
# ===========
# See https://github.com/inveniosoftware/invenio-communities
COMMUNITIES_ADMINISTRATION_DISABLED = False
# New as of v12.0.0, default is "redis://localhost:6379/4"
COMMUNITIES_IDENTITIES_CACHE_REDIS_URL = "redis://localhost:6379/1"
# Can add custom fields to communities, too
# https://inveniordm.docs.cern.ch/customize/custom_fields/communities/
# Require every record hav a community?
# https://discord.com/channels/692989811736182844/704625518552547329/1301855502397083699
# RDM_COMMUNITY_REQUIRED_TO_PUBLISH = True

# Only allow admins to create communities
# TODO eventually there'll be a Community Creator role we can give only to admins
# TODO https://github.com/inveniosoftware/rfcs/issues/90
# https://discord.com/channels/692989811736182844/704625518552547329/1296091404409372763
from invenio_administration.generators import Administration
from invenio_communities.permissions import CommunityPermissionPolicy
from invenio_records_permissions.generators import IfConfig, SystemProcess


class CustomCommunityPermissionPolicy(CommunityPermissionPolicy):
    """Custom community permission policy to only allow admins to create communities."""

    # Override can_create permission. Previous definition:
    # can_create = [AuthenticatedUser(), SystemProcess()]
    can_create = [Administration(), SystemProcess()]

    # Since this action uses an action we override, it must also be updated.
    # Otherwise it would use the `can_create` from the base permission policy.
    can_create_restricted = [
        IfConfig("COMMUNITIES_ALLOW_RESTRICTED", then_=can_create, else_=[]),
    ]


COMMUNITIES_PERMISSION_POLICY = CustomCommunityPermissionPolicy

# We don't have ORCID, etc. for our users, let URLs be identifiers
# https://discord.com/channels/692989811736182844/1212764629604769792
# https://github.com/cca/cca_invenio/issues/28
from invenio_rdm_records.config import RDM_RECORDS_IDENTIFIERS_SCHEMES
from invenio_rdm_records.config import RDM_RECORDS_PERSONORG_SCHEMES
from invenio_vocabularies.config import VOCABULARIES_NAMES_SCHEMES

# Cannot capitalize URL even though it's used as a label in the Creator UI
# schemes are expected to be lowercase (see keys of the imported dicts above)
RDM_RECORDS_PERSONORG_SCHEMES["url"] = RDM_RECORDS_IDENTIFIERS_SCHEMES["url"]
VOCABULARIES_NAMES_SCHEMES["url"] = RDM_RECORDS_IDENTIFIERS_SCHEMES["url"]

# Invenio-Records-Resources
# =========================
# See https://github.com/inveniosoftware/invenio-records-resources/blob/master/invenio_records_resources/config.py
SITE_UI_URL = secrets["SITE_UI_URL"]
SITE_API_URL = secrets["SITE_API_URL"]

# TODO insecure but needed due to https://github.com/inveniosoftware/invenio-rest/issues/132
REST_CSRF_ENABLED = False

# Invenio-RDM-Records
# ===================
# See https://inveniordm.docs.cern.ch/customize/dois/
DATACITE_ENABLED = False
DATACITE_USERNAME = ""
DATACITE_PASSWORD = ""
DATACITE_PREFIX = ""
DATACITE_TEST_MODE = True
DATACITE_DATACENTER_SYMBOL = ""

# Authentication - Invenio-Accounts and Invenio-OAuthclient
# =========================================================
# See: https://inveniordm.docs.cern.ch/customize/authentication/

# Invenio-Accounts
# ----------------
# See https://github.com/inveniosoftware/invenio-accounts/blob/master/invenio_accounts/config.py
ACCOUNTS_LOCAL_LOGIN_ENABLED = True  # enable local login
# 2025-01-28: Ngoc told me our usernames start with a letter, contain only lowercase letters,
# numbers, _, ., and - and have a max length of 24 characters (Google limitation).
ACCOUNTS_USERNAME_REGEX = r"[a-z][a-z0-9_\.-]{0,23}"
ACCOUNTS_USERNAME_RULES_TEXT = "Usernames must start with a letter, be 23 or fewer characters, and contain only lowercase letters, numbers, underscores, periods, and hyphens [a-z0-9_.-]."
SECURITY_REGISTERABLE = True  # local login: allow users to register
SECURITY_RECOVERABLE = True  # local login: allow users to reset the password
SECURITY_CHANGEABLE = True  # local login: allow users to change psw
# Disable email confirmation
SECURITY_CONFIRMABLE = False  # local login: users can confirm e-mail address
SECURITY_LOGIN_WITHOUT_CONFIRMATION = True

# Invenio-OAuthclient
# -------------------
# See https://github.com/inveniosoftware/invenio-oauthclient/blob/master/invenio_oauthclient/config.py

OAUTHCLIENT_REMOTE_APPS = {}  # configure external login providers

from invenio_oauthclient.views.client import auto_redirect_login

ACCOUNTS_LOGIN_VIEW_FUNCTION = (
    auto_redirect_login  # autoredirect to external login if enabled
)
OAUTHCLIENT_AUTO_REDIRECT_TO_EXTERNAL_LOGIN = False  # autoredirect to external login

# Invenio-UserProfiles
# --------------------
# Disallow users to change profile info (name, email, etc...). We provide this info from SSO.
USERPROFILES_READ_ONLY = True
# New as of v12.0.0
USERS_RESOURCES_ADMINISTRATION_ENABLED = True

# OAI-PMH
# =======
# See https://github.com/inveniosoftware/invenio-oaiserver/blob/master/invenio_oaiserver/config.py

OAISERVER_ID_PREFIX = "archive.cca.edu"
"""The prefix that will be applied to the generated OAI-PMH ids."""

# Invenio-Search
# --------------
SEARCH_INDEX_PREFIX = "invenio-"
# ! this doesn't seem to matter, is superseded by INVENIO_SEARCH_HOSTS env var in docker-services.yml
INVENIO_SEARCH_HOSTS = [{"host": "search", "port": 9200}]

# File Integrity Report
# =====================
# See https://inveniordm.docs.cern.ch/releases/versions/version-v11.0.0/#files-integrity
APP_RDM_ADMIN_EMAIL_RECIPIENT = "ephetteplace@cca.edu"

from cca.customfields import *  # type: ignore
