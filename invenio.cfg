"""
Main InvenioRDM configuration file. For full list of settings, see:
https://inveniordm.docs.cern.ch/reference/configuration/
"""
# ruff: noqa: E402,F403

import json
from datetime import datetime
from os import environ
from pathlib import Path
from sys import stderr
from typing import Any

from google.cloud import secretmanager
from google.oauth2.service_account import Credentials

# Get configuration from local JSON file or Google Secret Manager
# TODO we will need to add ENVIRONMENT as extraEnvVars in helm values.yml
environment: str | None = environ.get("ENVIRONMENT", "dockerbuild")
secrets: dict[str, Any] = {}
if environment == "dockerbuild":
    pass  # the build has to be able to work w/o access to secrets
elif environment == "local" and environ.get("CCA_SECRETS"):
    secrets_path = Path(environ["CCA_SECRETS"])
    if secrets_path.exists():
        with open(secrets_path) as f:
            print(f"==== Loading secrets from {secrets_path} ====", file=stderr)
            secrets = json.load(f)
    else:
        raise FileNotFoundError(
            f"Secrets file not found at {secrets_path}. "
            "Please ensure the CCA_SECRETS environment variable points to a valid file."
        )
else:
    # Load settings from Google Secret Manager
    if environ.get("GSM_CREDENTIALS"):
        GSM_CREDENTIALS: Credentials | None = Credentials.from_service_account_info(
            json.loads(environ["GSM_CREDENTIALS"])
        )
    else:
        # No credentials needed locally
        GSM_CREDENTIALS = None

    if GSM_CREDENTIALS:
        secret_manager_client = secretmanager.SecretManagerServiceClient(
            credentials=GSM_CREDENTIALS
        )
    else:
        secret_manager_client = secretmanager.SecretManagerServiceClient()

    if environment in ("local", "staging"):
        GCP_PROJECT: str = "cca-web-staging"
    elif environment == "production":
        GCP_PROJECT = "cca-web-0"
    else:
        raise ValueError(
            f"Invalid ENVIRONMENT value: {environment}. "
            "Expected 'local', 'staging', or 'production'."
        )
    print(
        f"==== Loading invenio_{environment} secrets from GCP project {GCP_PROJECT} ====",
        file=stderr,
    )
    payload: str = secret_manager_client.access_secret_version(
        name=f"projects/{GCP_PROJECT}/secrets/invenio_{environment}/versions/latest"
    ).payload.data.decode("utf-8")
    # Parse the JSON payload
    secrets = json.loads(payload)

# Flask
# =====
# See https://flask.palletsprojects.com/en/1.1.x/config/

# Define the value of the cache control header `max-age` returned by the server when serving
# public files. Files will be cached by the browser for the provided number of seconds.
# See flask documentation for more information:
# https://flask.palletsprojects.com/en/2.1.x/config/#SEND_FILE_MAX_AGE_DEFAULT
SEND_FILE_MAX_AGE_DEFAULT = 300

# SECURITY WARNING: keep the secret key used in production secret!
SECRET_KEY: str = secrets.get("INVENIO_SECRETKEY", "secret")

# Since HAProxy and Nginx route all requests no matter the host header
# provided, the allowed hosts variable is set to localhost. In production it
# should be set to the correct host and it is strongly recommended to only
# route correct hosts to the application.
TRUSTED_HOSTS: list[str] = secrets.get(
    "APP_ALLOWED_HOSTS", ["127.0.0.1", "invenio-dev.cca.edu"]
)

# Flask-IIIF
# ==========
# TODO this can be removed in v13 when my PRs are merged
from flask_iiif.config import IIIF_FORMATS, IIIF_FORMATS_PIL_MAP

IIIF_FORMATS["webp"] = "image/webp"
IIIF_FORMATS_PIL_MAP["webp"] = "webp"

# Flask-SQLAlchemy
# ================
# See https://flask-sqlalchemy.palletsprojects.com/en/2.x/config/
SQLALCHEMY_DATABASE_URI = secrets.get("INVENIO_SQLALCHEMY_DATABASE_URI")

# Invenio-App
# ===========
# See https://invenio-app.readthedocs.io/en/latest/configuration.html
APP_DEFAULT_SECURE_HEADERS = {
    "content_security_policy": {
        "default-src": [
            "'self'",
            "data:",  # for fonts
            "'unsafe-inline'",  # for inline scripts and styles
            "blob:",  # for pdf preview
            # Add your own policies here (e.g. analytics)
        ],
    },
    "content_security_policy_report_only": False,
    "content_security_policy_report_uri": None,
    "force_file_save": False,
    "force_https": True,
    "force_https_permanent": False,
    "frame_options": "sameorigin",
    "frame_options_allow_from": None,
    "session_cookie_http_only": True,
    "session_cookie_secure": True,
    "strict_transport_security": True,
    "strict_transport_security_include_subdomains": True,
    "strict_transport_security_max_age": 31556926,  # One year in seconds
    "strict_transport_security_preload": False,
}

# Flask-Babel
# ===========
# See https://python-babel.github.io/flask-babel/#configuration
# Default locale (language)
BABEL_DEFAULT_LOCALE = "en"
# Default time zone
BABEL_DEFAULT_TIMEZONE = "America/Los_Angeles"

# Invenio-Files-Rest
# ==================
FILES_REST_STORAGE_FACTORY = "invenio_s3.s3fs_storage_factory"
# File size quotas. These are 10gb by default. The largest file
# we have in VAULT is just above 9gb.
APP_RDM_DEPOSIT_FORM_QUOTA: dict[str, int] = {
    "maxFiles": 100,
    "maxStorage": 30 * 10**9,
}
# 30gb per record, 15gb per file
RDM_FILES_DEFAULT_QUOTA_SIZE: int = 30 * 10**9
RDM_FILES_DEFAULT_MAX_FILE_SIZE: int = 15 * 10**9
FILES_REST_DEFAULT_QUOTA_SIZE: int = 30 * 10**9
FILES_REST_DEFAULT_MAX_FILE_SIZE: int = 15 * 10**9

# Invenio-S3
# https://invenio-s3.readthedocs.io/en/latest/configuration.html
# ==========
# We could make the URL composable like we do with secrets root/invenio-$ENVIRONMENT
S3_ENDPOINT_URL = secrets.get("S3_ENDPOINT_URL")
S3_REGION_NAME = secrets.get("S3_REGION_NAME")
S3_ACCESS_KEY_ID = secrets.get("S3_ACCESS_KEY_ID")
S3_SECRET_ACCESS_KEY = secrets.get("S3_SECRET_ACCESS_KEY")
# When we upgrade to invenio-s3 2.0.1+ we can use this instead of AWS_* env vars
S3_CONFIG_EXTRA: dict[str, str] = {
    "request_checksum_calculation": "WHEN_REQUIRED",
    "response_checksum_validation": "WHEN_REQUIRED",
}

# Allow S3 endpoint in the CSP rules
APP_DEFAULT_SECURE_HEADERS["content_security_policy"]["default-src"].append(
    S3_ENDPOINT_URL
)

# Invenio-I18N
# ============
# See https://invenio-i18n.readthedocs.io/en/latest/configuration.html
# Other supported languages (do not include BABEL_DEFAULT_LOCALE in list).
I18N_LANGUAGES = [
    # ('de', _('German')),
]

# Invenio-Theme
# =============
# See https://invenio-theme.readthedocs.io/en/latest/configuration.html
# Lots of template options here
# Frontpage title
THEME_FRONTPAGE_TITLE = "CCA Digital Archive"
# Header logo
THEME_LOGO = "images/invenio-rdm.svg"
THEME_TRACKINGCODE_TEMPLATE = "./tracking_code.html"

# Invenio-App-RDM
# ===============
AUDIT_LOGS_ENABLED = True

# Instance's theme entrypoint file. Path relative to the ``assets/`` folder.
INSTANCE_THEME_FILE = "./less/theme.less"

# Module versions on the admin side
from cca import __version__ as cca_version
from invenio_app_rdm import __version__ as rdm_version

ADMINISTRATION_DISPLAY_VERSIONS: list[tuple[str, str]] = [
    ("invenio-app-rdm", f"v{rdm_version}"),
    ("cca site", f"v{cca_version}"),
]

APP_RDM_DEPOSIT_FORM_DEFAULTS = {
    "publication_date": lambda: datetime.now().strftime("%Y-%m-%d"),
    "rights": [
        {
            "id": "copyright",
            "title": "Copyright",
            "description": (
                "Copyright is a legal right that grants the creator"
                "of an original work exclusive rights to it."
            ),
            "link": "https://www.copyright.gov/",
        }
    ],
}

APP_RDM_DEPOSIT_FORM_AUTOCOMPLETE_NAMES = "search"  # "search_only" or "off"

# Static Pages
# ============
# https://inveniordm.docs.cern.ch/customize/static_pages/
# APP_RDM_PAGES = { "test": "/test", }

# Communities
# ===========
# See https://github.com/inveniosoftware/invenio-communities
COMMUNITIES_ADMINISTRATION_DISABLED = False
# New as of v12.0.0, default is "redis://localhost:6379/4"
COMMUNITIES_IDENTITIES_CACHE_REDIS_URL = "redis://localhost:6379/1"
# Can add custom fields to communities, too
# https://inveniordm.docs.cern.ch/customize/custom_fields/communities/
# Require every record hav a community?
# https://discord.com/channels/692989811736182844/704625518552547329/1301855502397083699
# RDM_COMMUNITY_REQUIRED_TO_PUBLISH = True

# Only allow admins to create communities
# TODO eventually there'll be a Community Creator role we can give only to admins
# TODO https://github.com/inveniosoftware/rfcs/issues/90
# https://discord.com/channels/692989811736182844/704625518552547329/1296091404409372763
from invenio_administration.generators import Administration
from invenio_communities.permissions import CommunityPermissionPolicy
from invenio_records_permissions.generators import IfConfig, SystemProcess


class CustomCommunityPermissionPolicy(CommunityPermissionPolicy):
    """Custom community permission policy to only allow admins to create communities."""

    # Override can_create permission. Previous definition:
    # can_create = [AuthenticatedUser(), SystemProcess()]
    can_create = [Administration(), SystemProcess()]

    # Since this action uses an action we override, it must also be updated.
    # Otherwise it would use the `can_create` from the base permission policy.
    can_create_restricted = [
        IfConfig("COMMUNITIES_ALLOW_RESTRICTED", then_=can_create, else_=[]),
    ]


COMMUNITIES_PERMISSION_POLICY = CustomCommunityPermissionPolicy

# We don't have ORCID, etc. for our users, let URLs be identifiers
# https://discord.com/channels/692989811736182844/1212764629604769792
# https://github.com/cca/cca_invenio/issues/28
from invenio_rdm_records.config import (
    RDM_RECORDS_IDENTIFIERS_SCHEMES,
    RDM_RECORDS_PERSONORG_SCHEMES,
)
from invenio_vocabularies.config import VOCABULARIES_NAMES_SCHEMES

# Cannot capitalize URL even though it's used as a label in the Creator UI
# schemes are expected to be lowercase (see keys of the imported dicts above)
RDM_RECORDS_PERSONORG_SCHEMES["url"] = RDM_RECORDS_IDENTIFIERS_SCHEMES["url"]
VOCABULARIES_NAMES_SCHEMES["url"] = RDM_RECORDS_IDENTIFIERS_SCHEMES["url"]

# Invenio-Records-Resources
# =========================
# See https://github.com/inveniosoftware/invenio-records-resources/blob/master/invenio_records_resources/config.py
SITE_UI_URL = secrets.get("SITE_UI_URL")
SITE_API_URL = secrets.get("SITE_API_URL")

# TODO insecure but needed due to https://github.com/inveniosoftware/invenio-rest/issues/132
REST_CSRF_ENABLED = False

# Invenio-RDM-Records
# ===================
# See https://inveniordm.docs.cern.ch/customize/dois/
DATACITE_ENABLED = False
DATACITE_USERNAME = ""
DATACITE_PASSWORD = ""
DATACITE_PREFIX = ""
DATACITE_TEST_MODE = True
DATACITE_DATACENTER_SYMBOL = ""

# Authentication - Invenio-Accounts and Invenio-OAuthclient
# =========================================================
# See: https://inveniordm.docs.cern.ch/customize/authentication/

# Invenio-Accounts
# ----------------
# See https://github.com/inveniosoftware/invenio-accounts/blob/master/invenio_accounts/config.py
ACCOUNTS_LOCAL_LOGIN_ENABLED = True  # enable local login
# 2025-01-28: Ngoc told me our usernames start with a letter, contain only lowercase letters,
# numbers, _, ., and - and have a max length of 24 characters (Google limitation).
ACCOUNTS_USERNAME_REGEX = r"[a-z][a-z0-9_\.-]{0,23}"
ACCOUNTS_USERNAME_RULES_TEXT = "Usernames must start with a letter, be 23 or fewer characters, and contain only lowercase letters, numbers, underscores, periods, and hyphens [a-z0-9_.-]."
SECURITY_REGISTERABLE = False  # local login: allow users to register
SECURITY_RECOVERABLE = True  # local login: allow users to reset the password
SECURITY_CHANGEABLE = True  # local login: allow users to change password
# Disable email confirmation
SECURITY_CONFIRMABLE = False  # local login: users can confirm e-mail address
SECURITY_LOGIN_WITHOUT_CONFIRMATION = True

# Invenio-OAuthclient
# -------------------
# See https://github.com/inveniosoftware/invenio-oauthclient/blob/master/invenio_oauthclient/config.py

OAUTHCLIENT_REMOTE_APPS = {}  # configure external login providers

from invenio_oauthclient.views.client import auto_redirect_login

ACCOUNTS_LOGIN_VIEW_FUNCTION = (
    auto_redirect_login  # autoredirect to external login if enabled
)
OAUTHCLIENT_AUTO_REDIRECT_TO_EXTERNAL_LOGIN = False  # autoredirect to external login

# Invenio-UserProfiles
# --------------------
# Disallow users to change profile info (name, email, etc...). We provide this info from SSO.
USERPROFILES_READ_ONLY = True
# New as of v12.0.0
USERS_RESOURCES_ADMINISTRATION_ENABLED = True

# OAI-PMH
# =======
# See https://github.com/inveniosoftware/invenio-oaiserver/blob/master/invenio_oaiserver/config.py

OAISERVER_ID_PREFIX = "archive.cca.edu"
"""The prefix that will be applied to the generated OAI-PMH ids."""

# Invenio-Search
# --------------
SEARCH_INDEX_PREFIX = "invenio-"
# ! this doesn't seem to matter, is superseded by INVENIO_SEARCH_HOSTS env var in docker-services.yml
INVENIO_SEARCH_HOSTS = [{"host": "search", "port": 9200}]

# File Integrity Report
# =====================
# See https://inveniordm.docs.cern.ch/releases/versions/version-v11.0.0/#files-integrity
APP_RDM_ADMIN_EMAIL_RECIPIENT = "ephetteplace@cca.edu"

from cca.customfields import *  # type: ignore

# SAML
# =====================
# See https://inveniordm.docs.cern.ch/customize/authentication/#saml-integration
if environment in ("staging", "production"):
    from invenio_saml.handlers import acs_handler_factory

    SSO_SAML_DEFAULT_BLUEPRINT_PREFIX = "/saml"
    """Base URL for the extensions endpoint."""

    SSO_SAML_DEFAULT_METADATA_ROUTE = "/metadata/<idp>"
    """URL route for the metadata request."""

    SSO_SAML_DEFAULT_SSO_ROUTE = "/login/<idp>"
    """URL route for the SP login."""

    SSO_SAML_DEFAULT_ACS_ROUTE = "/authorized/<idp>"
    """URL route to handle the IdP login request."""

    SSO_SAML_DEFAULT_SLO_ROUTE = "/slo/<idp>"
    """URL route for the SP logout."""

    SSO_SAML_DEFAULT_SLS_ROUTE = "/sls/<idp>"
    """URL route to handle the IdP logout request."""

    SSO_SAML_IDPS = {
        # name your authentication provider
        "remote_app": {
            # Basic info
            "title": "CCA SSO",
            "description": "SSO SAML Authentication Service",
            "icon": "",
            # path to the file i.e. "./saml/sp.crt"
            "sp_cert_file": "/run/secrets/saml-sp-certs/cca.crt",
            # path to the file i.e. "./saml/sp.key"
            "sp_key_file": "/run/secrets/saml-sp-certs/cca.key",
            "settings": {
                # If strict is True, then the Python Toolkit will reject unsigned
                # or unencrypted messages if it expects them to be signed or encrypted.
                # Also it will reject the messages if the SAML standard is not strictly
                # followed. Destination, NameId, Conditions ... are validated too.
                #'strict': True,
                "strict": False,
                # Enable debug mode (outputs errors).
                "debug": True,
                # Service Provider Data that we are deploying.
                "sp": {
                    # Specifies the constraints on the name identifier to be used to
                    # represent the requested subject.
                    # Take a look on https://github.com/onelogin/python-saml/blob/master/src/onelogin/saml2/constants.py
                    # to see the NameIdFormat that are supported.
                    "NameIDFormat": "urn:oasis:names:tc:SAML:1.1:nameid-format:unspecified",
                },
                # Identity Provider Data that we want connected with our SP.
                "idp": {
                    # Identifier of the IdP entity  (must be a URI)
                    "entityId": "https://sso.cca.edu/idp/shibboleth",
                    # SSO endpoint info of the IdP. (Authentication Request protocol)
                    "singleSignOnService": {
                        # URL Target of the IdP where the Authentication Request Message
                        # will be sent.
                        "url": "https://sso.cca.edu/idp/profile/SAML2/Redirect/SSO",
                        # SAML protocol binding to be used when returning the <Response>
                        # message. OneLogin Toolkit supports the HTTP-Redirect binding
                        # only for this endpoint.
                        "binding": "urn:oasis:names:tc:SAML:2.0:bindings:HTTP-Redirect",
                    },
                    # SLO endpoint info of the IdP.
                    "singleLogoutService": {
                        # URL Location where the <LogoutRequest> from the IdP will be sent (IdP-initiated logout)
                        "url": "https://sso.cca.edu/idp/profile/Logout",
                        # SAML protocol binding to be used when returning the <Response>
                        # message. OneLogin Toolkit supports the HTTP-Redirect binding
                        # only for this endpoint.
                        "binding": "urn:oasis:names:tc:SAML:2.0:bindings:HTTP-Redirect",
                    },
                    # Public X.509 certificate of the IdP
                    "x509cert": """-----BEGIN CERTIFICATE-----
MIIDBDCCAeygAwIBAgIJALzeXkDp6CobMA0GCSqGSIb3DQEBCwUAMBQxEjAQBgNVBAMMCTEyNy4w
LjAuMTAeFw0yMzEwMTYyMzQ2MThaFw0yODEwMTQyMzQ2MThaMBQxEjAQBgNVBAMMCTEyNy4wLjAu
MTCCASIwDQYJKoZIhvcNAQEBBQADggEPADCCAQoCggEBAM+DBzhQC8ibuJZlPhivbAEx6W7HCXHT
AM4mk/fJBC70qyAuDGz4MpwZ/41WzvlvXl/NnBAO+XdGDk8qYt0Q5WZoyBRLjnD16KS0DB1MjlQm
7tC0h6Ex1ViUN6FL+K/5iiDqQb9X2S5sICzMbyIh4UL0IV+USLpB04WOrY/UqzgHGvClJpTpzKIw
loAX7bsE/H33xt2368FA3NpxOmW5GYPgQhfC5CH33ethPzQc3pPdjINfzipaQoHTCLs4wgqQXpLY
r217jlSUFW5tm2K0KWtTplPL5id8szsju9+OQt5vRhvSqvn+P7a/U1rUZA7x6uGOBj51hyAmh9t5
4/OQ9bkCAwEAAaNZMFcwNgYDVR0RBC8wLYIJMTI3LjAuMC4xhiBodHRwczovLzEyNy4wLjAuMS9p
ZHAvc2hpYmJvbGV0aDAdBgNVHQ4EFgQUrDYwOp6Q6bwQgS4xqRoSYUJFwkIwDQYJKoZIhvcNAQEL
BQADggEBACBJY6iBQGvSHS3DFwMlGhFOCB51wdGqiPx7jNMigliwSQGLKe5n/PS2piIaNG1qa8EV
e7JCfJMh4EzvRVYs/NTWt/fmY3G/LCO0mnsgZKQvepaet+TlpOyABnEAEZ0rGQFlCMA8kgjhWIKR
Ls7iSQFv459Ce3r08lROz7RF2O6/9PJYFXeOq3+09m0kaTGirpFFM0NqNIIaCSwDj8hxSB/FDU5A
5rCELEgPW1PGL4Q47QT7settkEHy3bsmAGx5DuUcj4za8mL2/gDeLUuJ585liP044G8kRYEgyyJk
PsZy4QH/Y8Ns/mbC7BpjM6Aw24e5Ti5dz1piKLHjUyHS2wQ=
-----END CERTIFICATE-----""",
                },
                # Security settings
                # more on https://github.com/onelogin/python-saml
                "security": {
                    "authnRequestsSigned": False,
                    "failOnAuthnContextMismatch": False,
                    "logoutRequestSigned": False,
                    "logoutResponseSigned": False,
                    "metadataCacheDuration": None,
                    "metadataValidUntil": None,
                    "nameIdEncrypted": False,
                    "requestedAuthnContext": False,
                    "requestedAuthnContextComparison": "exact",
                    "signMetadata": False,
                    "signatureAlgorithm": "http://www.w3.org/2001/04/xmldsig-more#rsa-sha256",
                    "wantAssertionsEncrypted": False,
                    "wantAssertionsSigned": True,
                    "wantAttributeStatement": False,
                    "wantMessagesSigned": False,
                    "wantNameId": True,
                    "wantNameIdEncrypted": False,
                    "digestAlgorithm": "http://www.w3.org/2001/04/xmlenc#sha256",
                },
            },
            # Account Mapping
            "mappings": {
                "email": "urn:oid:0.9.2342.19200300.100.1.3",  # mail
                "name": "urn:oid:2.5.4.42",  # givenName
                "surname": "urn:oid:2.5.4.4",  # sn
                "external_id": "urn:oid:0.9.2342.19200300.100.1.1",
            },
            # Inject your remote_app to handler
            # Note: keep in mind the string should match
            # given name for authentication provider
            "acs_handler": acs_handler_factory("remote_app"),
            # Automatically set `confirmed_at` for users upon
            # registration, when using the default `acs_handler`
            "auto_confirm": False,
        }
    }

    ACCOUNTS_LOCAL_LOGIN_ENABLED = False  # disable local login
    OAUTHCLIENT_LOGIN_USER_TEMPLATE = "invenio_saml/login_user.html"
